# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    sudo apt-get update
    sudo apt-get install -y npm
  displayName: 'Installing npm using apt-get'

- script: |
    npm audit || true
  displayName: 'check for vulnaribities'

- script: |
    npm test || true
    extra-test || true
  displayName: 'perform unit test'

- script: |
    sonar-scanner ./ || true
  displayName: 'review code'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

- script: |
    sudo apt-get install wget apt-transport-https gnupg lsb-release
    wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    sudo apt-get update
    sudo apt-get install trivy
  displayName: 'Installing trivy'

- script: |
    trivy config Dockerfile
  displayName: 'Scan the Dockerile for Security'

- script: |
    BASE_IMAGE=`grep FROM Dockerfile | awk '{print $2}'`
    trivy image $BASE_IMAGE
  displayName: 'scanning the base image'

- script: |
    trivy config k8s
  displayName: 'scanning the manisfest files'

- script: |
    sudo docker build -t incharagowda/frontend-project:1.0.0 .
  displayName: 'Build the container image'

#- script: |
#    echo $(DOCKER_HUB_PASSWORD) | sudo docker login --username $(DOCKER_HUB_USERNAME) --password-stdin
#    sudo docker push incharagowda/frontend-project:1.0.0 
#  displayName: 'logging into registry using Variables & pushing the image'

#- script: |
#    echo $(DOCKER_HUB_PASSWORD) | sudo docker login --username $(DOCKER_HUB_USERNAME) --password-stdin
#    sudo docker push incharagowda/frontend-project:1.0.0 
#  displayName: 'logging into registry using Variables & pushing the image'

- task: Docker@2
  inputs:
    containerRegistry: docker-hub
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: incharagowda/frontend-project:1.0.0 

- task: KubernetesManifest@1
  displayName: Deploy GKE cluster
  inputs:
    action: 'deploy'
    connectionType: 'kubernetesServiceConnection'
    kubernetesServiceConnection: 'gke-development'
    manifests: |
      k8s/simple/frontend-deployment.yaml
      k8s/simple/frontend-service.yaml